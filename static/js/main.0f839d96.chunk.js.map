{"version":3,"sources":["store.ts","loadData.ts","Todo/Todo.tsx","TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["initialState","todos","store","createStore","state","action","type","filter","todo","id","sort","a","b","user","name","localeCompare","title","Number","completed","API_URL","loadData","url","fetch","then","res","json","loadTodos","loadUsers","connect","dispatch","onRemoveTodo","className","onClick","handleSortByName","handleSortByTitle","handleSortByCompleted","props","map","key","setTodos","todoWithUser","useState","isLoading","setIsLoading","length","Promise","all","todosFromApi","usersFromApi","find","person","userId","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f839d96.chunk.js","sourcesContent":["import { Action, Reducer, createStore } from 'redux';\nimport { TodosWithUsers } from './types';\n\nexport interface InitialState {\n  todos: TodosWithUsers | [];\n}\n\ninterface DispatchAction extends Action {\n  type: string;\n  todos: TodosWithUsers;\n  id?: number;\n}\n\nconst initialState: InitialState = {\n  todos: [],\n};\n\nconst reduser: Reducer<InitialState, DispatchAction> = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOAD_TODOS':\n      return {\n        todos: action.todos,\n      };\n    case 'REMOVE_TODO':\n      return {\n        todos: [...state.todos].filter(todo => todo.id !== action.id),\n      };\n    case 'SORT_BY_NAME':\n      return {\n        todos: [...state.todos].sort((a, b) => a.user.name.localeCompare(b.user.name)),\n      };\n    case 'SORT_BY_TITLE':\n      return {\n        todos: [...state.todos].sort((a, b) => a.title.localeCompare(b.title)),\n      };\n    case 'SORT_BY_COMPLETED':\n      return {\n        todos: [...state.todos].sort((a, b) => Number(a.completed) - Number(b.completed)),\n      };\n    case 'RESET_TODOS':\n      return {\n        todos: action.todos,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore<InitialState, DispatchAction, null, null>(reduser);\n","import { Todo, User } from './types';\n\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nfunction loadData<T>(url: string): Promise<T> {\n  return fetch(url)\n    .then(res => res.json());\n}\n\nexport const loadTodos = loadData<Todo[]>(`${API_URL}todos`);\nexport const loadUsers = loadData<User[]>(`${API_URL}users`);\n","import React, { FC } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { TodoWithUser } from '../types';\nimport './Todo.css';\n\ninterface Props {\n  todo: TodoWithUser;\n  onRemoveTodo: (id: number) => void;\n}\n\nconst Todo: FC<Props> = ({ todo, onRemoveTodo }) => {\n  return (\n    <tr>\n      <td>{todo.user.name}</td>\n      <td>{todo.title}</td>\n      <td>{todo.completed ? 'Complete' : 'Do it!'}</td>\n      <td>\n        <button\n          type=\"button\"\n          className=\"table__button table__button-remove\"\n          onClick={() => onRemoveTodo(todo.id)}\n        >\n          Remove\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onRemoveTodo: (id: number) => dispatch({\n    type: 'REMOVE_TODO',\n    id,\n  }),\n});\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","import React, { FC } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { TodoWithUser } from '../types';\nimport Todo from '../Todo/Todo';\nimport './TodoList.css';\n\ninterface Props {\n  todos: TodoWithUser[];\n  handleSortByName(): void;\n  handleSortByTitle(): void;\n  handleSortByCompleted(): void;\n}\n\nconst TodoList: FC<Props> = (props) => {\n  const {\n    todos,\n    handleSortByName,\n    handleSortByTitle,\n    handleSortByCompleted,\n  } = props;\n\n  return (\n    <table className=\"table\">\n      <thead className=\"table__header\">\n        <tr>\n          <th>\n            <button\n              type=\"button\"\n              className=\"table__button table__button-header\"\n              onClick={handleSortByName}\n            >\n              Name\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              className=\"table__button table__button-header\"\n              onClick={handleSortByTitle}\n            >\n              Todo\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              className=\"table__button table__button-header\"\n              onClick={handleSortByCompleted}\n            >\n              Status\n            </button>\n          </th>\n          <th>\n            <span />\n          </th>\n        </tr>\n      </thead>\n      <tbody className=\"table__body\">\n        {todos.map(todo => (\n          <Todo\n            todo={todo}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  handleSortByName: () => dispatch({\n    type: 'SORT_BY_NAME',\n  }),\n  handleSortByTitle: () => dispatch({\n    type: 'SORT_BY_TITLE',\n  }),\n  handleSortByCompleted: () => dispatch({\n    type: 'SORT_BY_COMPLETED',\n  }),\n});\n\nexport default connect(null, mapDispatchToProps)(TodoList);\n","import React, { FC, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { loadTodos, loadUsers } from './loadData';\nimport { TodosWithUsers, User, Todo } from './types';\nimport TodoList from './TodoList/TodoList';\nimport { InitialState } from './store';\nimport './App.css';\n\ninterface Props {\n  todos: TodosWithUsers | [];\n  setTodos: (todoWithUser: TodosWithUsers) => void;\n}\n\nconst App: FC<Props> = ({ todos, setTodos }) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLoadTodos = () => {\n    setIsLoading(true);\n\n    Promise.all([\n      loadTodos,\n      loadUsers,\n    ])\n      .then(([todosFromApi, usersFromApi]) => {\n        const todoWithUser = todosFromApi.map((todo: Todo) => {\n          const user = usersFromApi.find(\n            (person: User) => todo.userId === person.id,\n          ) as User;\n\n          return { ...todo, user };\n        });\n\n        setTodos(todoWithUser);\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <>\n      <h1>Redux list of todos</h1>\n      {\n        todos.length\n          ? (\n            <div className=\"app\">\n              <TodoList\n                todos={todos}\n              />\n            </div>\n          )\n          : (\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={handleLoadTodos}\n              disabled={isLoading}\n            >\n              Load Todo\n            </button>\n          )\n      }\n      {isLoading && (\n        <p className=\"loading-text\">Loading...</p>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: InitialState) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todoWithUser: TodosWithUsers) => dispatch({\n    type: 'LOAD_TODOS',\n    todos: todoWithUser,\n  }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}