{"version":3,"sources":["store.ts","constants.ts","loadData.ts","Todo/Todo.tsx","actionCreators.ts","TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["initialState","todos","isLoading","sortField","undefined","store","createStore","state","action","type","filter","todo","id","API_URL","loadData","url","fetch","then","res","json","mapDispatchToProps","onRemoveTodo","value","connect","user","name","title","completed","className","onClick","dispatch","setTodos","todoWithUser","props","handleFilter","field","filteredTodos","sort","a","b","localeCompare","Number","map","key","setIsLoad","setLoading","length","Promise","all","todosFromApi","usersFromApi","find","person","userId","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28ff1871.chunk.js","sourcesContent":["import { Action, Reducer, createStore } from 'redux';\nimport { TodosWithUsers } from './types';\nimport {\n  LOAD_TODOS,\n  SET_LOAD,\n  REMOVE_TODO,\n  SORTED_TODOS,\n} from './constants';\n\nexport interface InitialState {\n  todos: TodosWithUsers | [];\n  isLoading?: boolean;\n  sortField?: string;\n}\n\ninterface DispatchAction extends Action {\n  type: string;\n  todos: TodosWithUsers;\n  id?: number;\n  isLoading?: boolean;\n  sortField?: string;\n}\n\nconst initialState: InitialState = {\n  todos: [],\n  isLoading: false,\n  sortField: undefined,\n};\n\nconst reduser: Reducer<InitialState, DispatchAction> = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        todos: action.todos,\n      };\n    case SET_LOAD:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case REMOVE_TODO:\n      return {\n        todos: [...state.todos].filter(todo => todo.id !== action.id),\n      };\n    case SORTED_TODOS:\n      return {\n        todos: action.todos,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore<InitialState, DispatchAction, null, null>(reduser);\n","export const LOAD_TODOS = 'LOAD_TODOS';\nexport const SET_LOAD = 'SET_LOAD';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const SORTED_TODOS = 'SORTED_TODOS';\n","import { Todo, User } from './types';\n\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nfunction loadData<T>(url: string): Promise<T> {\n  return fetch(url)\n    .then(res => res.json());\n}\n\nexport const loadTodos = () => loadData<Todo[]>(`${API_URL}todos`);\nexport const loadUsers = () => loadData<User[]>(`${API_URL}users`);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { TodoWithUser } from '../types';\nimport { removeTodo } from '../actionCreators';\nimport './Todo.css';\n\ninterface Props {\n  todo: TodoWithUser;\n  onRemoveTodo: (id: number) => void;\n}\n\nconst Todo: FC<Props> = ({ todo, onRemoveTodo }) => {\n  return (\n    <tr>\n      <td>{todo.user.name}</td>\n      <td>{todo.title}</td>\n      <td>{todo.completed ? 'Complete' : 'Do it!'}</td>\n      <td>\n        <button\n          type=\"button\"\n          className=\"table__button table__button-remove\"\n          onClick={() => onRemoveTodo(todo.id)}\n        >\n          Remove\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapDispatchToProps = ({ onRemoveTodo: removeTodo });\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","import { TodosWithUsers } from './types';\nimport {\n  LOAD_TODOS, SET_LOAD, REMOVE_TODO, SORTED_TODOS,\n} from './constants';\n\nexport const loadAllTodos = (value: TodosWithUsers) => ({ type: LOAD_TODOS, todos: value });\nexport const setLoading = (value: boolean) => ({ type: SET_LOAD, isLoading: value });\nexport const removeTodo = (value: number) => ({ type: REMOVE_TODO, id: value });\nexport const sortedTodos = (value: TodosWithUsers) => ({ type: SORTED_TODOS, todos: value });\n","import React, { FC } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { TodosWithUsers } from '../types';\nimport Todo from '../Todo/Todo';\nimport { InitialState } from '../store';\nimport { sortedTodos } from '../actionCreators';\nimport './TodoList.css';\n\ninterface Props {\n  todos: TodosWithUsers;\n  setTodos: (todoWithUser: TodosWithUsers) => void;\n}\n\nconst TodoList: FC<Props> = (props) => {\n  const {\n    todos,\n    setTodos,\n  } = props;\n\n  const handleFilter = (field: string) => {\n    const filteredTodos = [...todos];\n\n    switch (field) {\n      case 'name':\n        setTodos(filteredTodos.sort((a, b) => a.user.name.localeCompare(b.user.name)));\n        break;\n      case 'title':\n        setTodos(filteredTodos.sort((a, b) => a.title.localeCompare(b.title)));\n        break;\n      case 'completed':\n        setTodos(filteredTodos.sort((a, b) => Number(a.completed) - Number(b.completed)));\n        break;\n      default:\n    }\n  };\n\n  return (\n    <table className=\"table\">\n      <thead className=\"table__header\">\n        <tr>\n          <th>\n            <button\n              type=\"button\"\n              className=\"table__button table__button-header\"\n              onClick={() => handleFilter('name')}\n            >\n              Name\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              className=\"table__button table__button-header\"\n              onClick={() => handleFilter('title')}\n            >\n              Todo\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              className=\"table__button table__button-header\"\n              onClick={() => handleFilter('completed')}\n            >\n              Status\n            </button>\n          </th>\n          <th>\n            <span />\n          </th>\n        </tr>\n      </thead>\n      <tbody className=\"table__body\">\n        {todos.map(todo => (\n          <Todo\n            todo={todo}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst mapStateToProps = (state: InitialState) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todoWithUser: TodosWithUsers) => dispatch(sortedTodos(todoWithUser)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { loadTodos, loadUsers } from './loadData';\nimport { TodosWithUsers, User, Todo } from './types';\nimport TodoList from './TodoList/TodoList';\nimport { InitialState } from './store';\nimport { loadAllTodos, setLoading } from './actionCreators';\nimport './App.css';\n\ninterface Props {\n  todos: TodosWithUsers | [];\n  isLoading: boolean | undefined;\n  setTodos: (todoWithUser: TodosWithUsers) => void;\n  setIsLoad: (value: boolean) => void;\n}\n\nconst App: FC<Props> = ({\n  todos, setTodos, isLoading, setIsLoad,\n}) => {\n  const handleLoadTodos = () => {\n    setIsLoad(true);\n\n    Promise.all([\n      loadTodos(),\n      loadUsers(),\n    ])\n      .then(([todosFromApi, usersFromApi]) => {\n        const todoWithUser = todosFromApi.map((todo: Todo) => {\n          const user = usersFromApi.find(\n            (person: User) => todo.userId === person.id,\n          ) as User;\n\n          return { ...todo, user };\n        });\n\n        setTodos(todoWithUser);\n        setIsLoad(false);\n      });\n  };\n\n  return (\n    <>\n      <h1>Redux list of todos</h1>\n      {\n        todos.length\n          ? (\n            <div className=\"app\">\n              <TodoList />\n            </div>\n          )\n          : (\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={handleLoadTodos}\n              disabled={isLoading}\n            >\n              Load Todo\n            </button>\n          )\n      }\n      {isLoading && (\n        <p className=\"loading-text\">Loading...</p>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: InitialState) => ({\n  todos: state.todos,\n  isLoading: state.isLoading,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todoWithUser: TodosWithUsers) => dispatch(loadAllTodos(todoWithUser)),\n  setIsLoad: (value: boolean) => dispatch(setLoading(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}