{"version":3,"sources":["store.ts","constants.ts","loadData.ts","Todo/Todo.tsx","actionCreators.ts","TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["initialState","todos","isLoading","sortField","store","createStore","state","action","type","filter","todo","id","API_URL","loadData","url","fetch","then","res","json","mapDispatchToProps","onRemoveTodo","value","connect","user","name","title","completed","className","onClick","dispatch","setSorted","props","map","key","setTodos","todoWithUser","setIsLoad","setIsLoading","sortedTodos","useMemo","completeTodos","sortBy","sort","a","b","localeCompare","Number","length","Promise","all","todosFromApi","usersFromApi","todosWithUser","find","person","userId","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4e48374.chunk.js","sourcesContent":["import { Action, Reducer, createStore } from 'redux';\nimport { TodosWithUsers } from './types';\nimport {\n  LOAD_TODOS,\n  SET_LOAD,\n  REMOVE_TODO,\n  SET_SORTED,\n} from './constants';\n\nexport interface InitialState {\n  todos: TodosWithUsers | [];\n  isLoading?: boolean;\n  sortField?: string;\n}\n\ninterface DispatchAction extends Action {\n  type: string;\n  todos: TodosWithUsers;\n  id?: number;\n  isLoading?: boolean;\n  sortField?: string;\n}\n\nconst initialState: InitialState = {\n  todos: [],\n  isLoading: false,\n  sortField: '',\n};\n\nconst reduser: Reducer<InitialState, DispatchAction> = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        todos: action.todos,\n      };\n    case SET_LOAD:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case REMOVE_TODO:\n      return {\n        todos: [...state.todos].filter(todo => todo.id !== action.id),\n      };\n    case SET_SORTED:\n      return {\n        ...state,\n        sortField: action.sortField,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore<InitialState, DispatchAction, null, null>(reduser);\n","export const LOAD_TODOS = 'LOAD_TODOS';\nexport const SET_LOAD = 'SET_LOAD';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const SET_SORTED = 'SET_SORTED';\n","import { Todo, User } from './types';\n\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nfunction loadData<T>(url: string): Promise<T> {\n  return fetch(url)\n    .then(res => res.json());\n}\n\nexport const loadTodos = () => loadData<Todo[]>(`${API_URL}todos`);\nexport const loadUsers = () => loadData<User[]>(`${API_URL}users`);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { TodoWithUser } from '../types';\nimport { removeTodo } from '../actionCreators';\nimport './Todo.css';\n\ninterface Props {\n  todo: TodoWithUser;\n  onRemoveTodo: (id: number) => void;\n}\n\nconst Todo: FC<Props> = ({ todo, onRemoveTodo }) => {\n  return (\n    <tr>\n      <td>{todo.user.name}</td>\n      <td>{todo.title}</td>\n      <td>{todo.completed ? 'Complete' : 'Do it!'}</td>\n      <td>\n        <button\n          type=\"button\"\n          className=\"table__button table__button-remove\"\n          onClick={() => onRemoveTodo(todo.id)}\n        >\n          Remove\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapDispatchToProps = ({ onRemoveTodo: removeTodo });\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","import { TodosWithUsers } from './types';\nimport {\n  LOAD_TODOS, SET_LOAD, REMOVE_TODO, SET_SORTED,\n} from './constants';\n\nexport const loadAllTodos = (value: TodosWithUsers) => ({\n  type: LOAD_TODOS,\n  todos: value,\n});\n\nexport const setIsLoading = (value: boolean) => ({\n  type: SET_LOAD,\n  isLoading: value,\n});\n\nexport const removeTodo = (value: number) => ({\n  type: REMOVE_TODO,\n  id: value,\n});\n\nexport const setSortField = (value: string) => ({\n  type: SET_SORTED,\n  sortField: value,\n});\n","import React, { FC } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { TodosWithUsers } from '../types';\nimport Todo from '../Todo/Todo';\nimport { setSortField } from '../actionCreators';\nimport './TodoList.css';\n\ninterface Props {\n  todos: TodosWithUsers;\n  setSorted: (sortField: string) => void;\n}\n\nconst TodoList: FC<Props> = (props) => {\n  const {\n    todos,\n    setSorted,\n  } = props;\n\n  return (\n    <table className=\"table\">\n      <thead className=\"table__header\">\n        <tr>\n          <th>\n            <button\n              type=\"button\"\n              className=\"table__button table__button-header\"\n              onClick={() => setSorted('name')}\n            >\n              Name\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              className=\"table__button table__button-header\"\n              onClick={() => setSorted('title')}\n            >\n              Todo\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              className=\"table__button table__button-header\"\n              onClick={() => setSorted('completed')}\n            >\n              Status\n            </button>\n          </th>\n          <th>\n            <span />\n          </th>\n        </tr>\n      </thead>\n      <tbody className=\"table__body\">\n        {todos.map(todo => (\n          <Todo\n            todo={todo}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setSorted: (sortField: string) => dispatch(setSortField(sortField)),\n});\n\nexport default connect(null, mapDispatchToProps)(TodoList);\n","import React, { FC, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { loadTodos, loadUsers } from './loadData';\nimport { TodosWithUsers, User, Todo } from './types';\nimport TodoList from './TodoList/TodoList';\nimport { InitialState } from './store';\nimport { loadAllTodos, setIsLoading } from './actionCreators';\nimport './App.css';\n\ninterface Props {\n  todos: TodosWithUsers | [];\n  isLoading?: boolean;\n  sortField?: string;\n  setTodos: (todoWithUser: TodosWithUsers) => void;\n  setIsLoad: (value: boolean) => void;\n}\n\nconst App: FC<Props> = ({\n  todos, setTodos, sortField, isLoading, setIsLoad,\n}) => {\n  const handleLoadTodos = () => {\n    setIsLoad(true);\n\n    Promise.all([\n      loadTodos(),\n      loadUsers(),\n    ]).then(([todosFromApi, usersFromApi]) => {\n      const todosWithUser = todosFromApi.map((todo: Todo) => {\n        const user = usersFromApi.find(\n          (person: User) => todo.userId === person.id,\n        ) as User;\n\n        return { ...todo, user };\n      });\n\n      setTodos(todosWithUser);\n      setIsLoad(false);\n    });\n  };\n\n  const sort = (completeTodos: TodosWithUsers, sortBy: string) => {\n    switch (sortBy) {\n      case 'name':\n        return [...completeTodos].sort(\n          (a, b) => a.user.name.localeCompare(b.user.name),\n        );\n\n      case 'title':\n        return [...completeTodos].sort(\n          (a, b) => a.title.localeCompare(b.title),\n        );\n\n      case 'completed':\n        return [...completeTodos].sort(\n          (a, b) => Number(a.completed) - Number(b.completed),\n        );\n\n      default: return completeTodos;\n    }\n  };\n\n  const sortedTodos = useMemo(() => sort(todos, sortField as string), [todos, sortField]);\n\n  return (\n    <>\n      <h1>Redux list of todos</h1>\n      {\n        todos.length\n          ? (\n            <div className=\"app\">\n              <TodoList\n                todos={sortedTodos}\n              />\n            </div>\n          )\n          : (\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={handleLoadTodos}\n              disabled={isLoading}\n            >\n              Load Todo\n            </button>\n          )\n      }\n      {isLoading && (\n        <p className=\"loading-text\">Loading...</p>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: InitialState) => ({\n  todos: state.todos,\n  isLoading: state.isLoading,\n  sortField: state.sortField,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todoWithUser: TodosWithUsers) => dispatch(loadAllTodos(todoWithUser)),\n  setIsLoad: (value: boolean) => dispatch(setIsLoading(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}